// Generated by `wit-bindgen` 0.44.0. DO NOT EDIT!
#ifndef __BINDINGS_ENV_H
#define __BINDINGS_ENV_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

typedef struct env_string_t {
  uint8_t*ptr;
  size_t len;
} env_string_t;

typedef struct {
  uint16_t *ptr;
  size_t len;
} env_list_u16_t;

// Imported Functions from `emlite:env/host@0.1.0`
extern void emlite_env_host_emlite_init_handle_table(void);
extern uint32_t emlite_env_host_emlite_val_new_array(void);
extern uint32_t emlite_env_host_emlite_val_new_object(void);
extern uint32_t emlite_env_host_emlite_val_make_bool(bool v);
extern uint32_t emlite_env_host_emlite_val_make_int(int32_t v);
extern uint32_t emlite_env_host_emlite_val_make_uint(uint32_t v);
extern uint32_t emlite_env_host_emlite_val_make_bigint(int64_t v);
extern uint32_t emlite_env_host_emlite_val_make_biguint(uint64_t v);
extern uint32_t emlite_env_host_emlite_val_make_double(double v);
extern uint32_t emlite_env_host_emlite_val_make_str(env_string_t *s);
extern uint32_t emlite_env_host_emlite_val_make_str_utf16(env_list_u16_t *s);
extern bool emlite_env_host_emlite_val_get_value_bool(uint32_t h);
extern int32_t emlite_env_host_emlite_val_get_value_int(uint32_t h);
extern uint32_t emlite_env_host_emlite_val_get_value_uint(uint32_t h);
extern int64_t emlite_env_host_emlite_val_get_value_bigint(uint32_t h);
extern uint64_t emlite_env_host_emlite_val_get_value_biguint(uint32_t h);
extern double emlite_env_host_emlite_val_get_value_double(uint32_t h);
extern void emlite_env_host_emlite_val_get_value_string(uint32_t h, env_string_t *ret);
extern void emlite_env_host_emlite_val_get_value_string_utf16(uint32_t h, env_list_u16_t *ret);
extern void emlite_env_host_emlite_val_typeof(uint32_t h, env_string_t *ret);
extern void emlite_env_host_emlite_val_push(uint32_t arr, uint32_t val);
extern uint32_t emlite_env_host_emlite_val_get(uint32_t obj, uint32_t idx);
extern void emlite_env_host_emlite_val_set(uint32_t obj, uint32_t idx, uint32_t val);
extern bool emlite_env_host_emlite_val_has(uint32_t obj, uint32_t key);
extern bool emlite_env_host_emlite_val_not(uint32_t h);
extern bool emlite_env_host_emlite_val_is_string(uint32_t h);
extern bool emlite_env_host_emlite_val_is_number(uint32_t h);
extern bool emlite_env_host_emlite_val_is_bool(uint32_t h);
extern bool emlite_env_host_emlite_val_gt(uint32_t a, uint32_t b);
extern bool emlite_env_host_emlite_val_gte(uint32_t a, uint32_t b);
extern bool emlite_env_host_emlite_val_lt(uint32_t a, uint32_t b);
extern bool emlite_env_host_emlite_val_lte(uint32_t a, uint32_t b);
extern bool emlite_env_host_emlite_val_equals(uint32_t a, uint32_t b);
extern bool emlite_env_host_emlite_val_strictly_equals(uint32_t a, uint32_t b);
extern bool emlite_env_host_emlite_val_instanceof(uint32_t a, uint32_t b);
extern uint32_t emlite_env_host_emlite_val_obj_call(uint32_t obj, env_string_t *method, uint32_t argv);
extern bool emlite_env_host_emlite_val_obj_has_own_prop(uint32_t obj, env_string_t *prop);
extern uint32_t emlite_env_host_emlite_val_construct_new(uint32_t ctor, uint32_t argv);
extern uint32_t emlite_env_host_emlite_val_func_call(uint32_t fn, uint32_t argv);
extern void emlite_env_host_emlite_val_inc_ref(uint32_t h);
extern void emlite_env_host_emlite_val_dec_ref(uint32_t h);
extern void emlite_env_host_emlite_val_throw(uint32_t h);
extern void emlite_env_host_emlite_print_object_map(void);
extern void emlite_env_host_emlite_reset_object_map(void);
extern uint32_t emlite_env_host_emlite_val_make_callback(uint32_t fidx, uint32_t data);
extern int32_t emlite_env_host_emlite_target(void);

// Exported Functions from `emlite:env/dyncall@0.1.0`
uint32_t exports_emlite_env_dyncall_apply(uint32_t fidx, uint32_t argv, uint32_t data);

// Helper Functions

void env_list_u16_free(env_list_u16_t *ptr);

// Sets the string `ret` to reference the input string `s` without copying it
void env_string_set(env_string_t *ret, const char*s);

// Creates a copy of the input nul-terminated string `s` and
// stores it into the component model string `ret`.
void env_string_dup(env_string_t *ret, const char*s);

// Deallocates the string pointed to by `ret`, deallocating
// the memory behind the string.
void env_string_free(env_string_t *ret);

#ifdef __cplusplus
}
#endif
#endif
